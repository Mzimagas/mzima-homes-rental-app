#!/usr/bin/env node

/**
 * Verify Migration Success
 * Tests that the comprehensive RLS fix migration was applied successfully
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function verifyMigrationSuccess() {
  console.log('üîç Verifying Migration Success...')
  console.log('   Testing all aspects of the RLS fix migration\n')
  
  let allTestsPassed = true
  
  try {
    // 1. Test data consistency
    console.log('1Ô∏è‚É£ Data Consistency Tests...')
    
    const { data: properties, error: propError } = await supabase
      .from('properties')
      .select('id, name, landlord_id')
    
    const { data: landlords, error: landError } = await supabase
      .from('landlords')
      .select('id, full_name, email')
    
    const { data: propertyUsers, error: puError } = await supabase
      .from('property_users')
      .select('user_id, property_id, role, status')
    
    if (propError || landError || puError) {
      console.log('‚ùå Failed to fetch basic data')
      allTestsPassed = false
    } else {
      console.log(`   ‚úÖ Properties: ${properties.length}`)
      console.log(`   ‚úÖ Landlords: ${landlords.length}`)
      console.log(`   ‚úÖ Property users: ${propertyUsers.length}`)
      
      // Check foreign key consistency
      let foreignKeyIssues = 0
      const landlordIds = landlords.map(l => l.id)
      
      for (const property of properties) {
        if (property.landlord_id && !landlordIds.includes(property.landlord_id)) {
          foreignKeyIssues++
          console.log(`   ‚ö†Ô∏è Property ${property.name} has invalid landlord_id: ${property.landlord_id}`)
        }
      }
      
      if (foreignKeyIssues === 0) {
        console.log('   ‚úÖ All foreign key constraints are valid')
      } else {
        console.log(`   ‚ùå Found ${foreignKeyIssues} foreign key issues`)
        allTestsPassed = false
      }
      
      // Check property_users consistency
      let propertyUserIssues = 0
      
      for (const property of properties) {
        const hasOwner = propertyUsers.some(pu => 
          pu.property_id === property.id && 
          pu.role === 'OWNER' && 
          pu.status === 'ACTIVE'
        )
        
        if (!hasOwner) {
          propertyUserIssues++
          console.log(`   ‚ö†Ô∏è Property ${property.name} has no active OWNER in property_users`)
        }
      }
      
      if (propertyUserIssues === 0) {
        console.log('   ‚úÖ All properties have active owners in property_users')
      } else {
        console.log(`   ‚ùå Found ${propertyUserIssues} properties without active owners`)
        allTestsPassed = false
      }
    }
    
    // 2. Test helper functions
    console.log('\n2Ô∏è‚É£ Helper Function Tests...')
    
    const helperFunctions = [
      'user_has_property_access',
      'get_user_accessible_properties', 
      'create_property_with_owner',
      'ensure_user_landlord_entry'
    ]
    
    for (const funcName of helperFunctions) {
      try {
        // Test if function exists by calling it with invalid params (should fail gracefully)
        const { error } = await supabase.rpc(funcName, {})
        
        if (error && error.message.includes('function') && error.message.includes('does not exist')) {
          console.log(`   ‚ùå Function ${funcName} does not exist`)
          allTestsPassed = false
        } else {
          console.log(`   ‚úÖ Function ${funcName} exists`)
        }
      } catch (err) {
        console.log(`   ‚úÖ Function ${funcName} exists (error expected with empty params)`)
      }
    }
    
    // 3. Test property creation
    console.log('\n3Ô∏è‚É£ Property Creation Test...')
    
    try {
      const { data: authUsers } = await supabase.auth.admin.listUsers()
      
      if (authUsers?.users?.length > 0) {
        const testUser = authUsers.users[0]
        console.log(`   Testing with user: ${testUser.email}`)
        
        // Test the create_property_with_owner function
        const { data: testPropertyId, error: createError } = await supabase.rpc('create_property_with_owner', {
          property_name: 'Migration Verification Test Property',
          property_address: '123 Verification Test Street',
          property_type: 'APARTMENT'
        })
        
        if (createError) {
          console.log(`   ‚ùå Property creation failed: ${createError.message}`)
          allTestsPassed = false
        } else {
          console.log(`   ‚úÖ Property created successfully: ${testPropertyId}`)
          
          // Verify the property was created correctly
          const { data: createdProperty, error: fetchError } = await supabase
            .from('properties')
            .select('id, name, landlord_id')
            .eq('id', testPropertyId)
            .single()
          
          if (fetchError) {
            console.log(`   ‚ùå Failed to fetch created property: ${fetchError.message}`)
            allTestsPassed = false
          } else {
            console.log(`   ‚úÖ Property details verified: ${createdProperty.name}`)
            
            // Check if property_users entry was created
            const { data: propertyUserEntry, error: puFetchError } = await supabase
              .from('property_users')
              .select('user_id, role, status')
              .eq('property_id', testPropertyId)
              .eq('role', 'OWNER')
              .single()
            
            if (puFetchError) {
              console.log(`   ‚ùå Property users entry not found: ${puFetchError.message}`)
              allTestsPassed = false
            } else {
              console.log(`   ‚úÖ Property users entry verified: ${propertyUserEntry.role}`)
            }
          }
          
          // Clean up test property
          await supabase.from('properties').delete().eq('id', testPropertyId)
          await supabase.from('property_users').delete().eq('property_id', testPropertyId)
          console.log('   ‚úÖ Test property cleaned up')
        }
      } else {
        console.log('   ‚ö†Ô∏è No auth users available for testing')
      }
    } catch (err) {
      console.log(`   ‚ùå Property creation test failed: ${err.message}`)
      allTestsPassed = false
    }
    
    // 4. Test RLS policies
    console.log('\n4Ô∏è‚É£ RLS Policy Tests...')
    
    // Test with anon client (simulates authenticated user)
    const anonClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
    
    // Test property access without authentication
    const { data: anonProperties, error: anonError } = await anonClient
      .from('properties')
      .select('id')
      .limit(1)
    
    if (anonError && anonError.message.includes('row-level security')) {
      console.log('   ‚úÖ RLS is properly blocking unauthenticated access')
    } else if (anonError) {
      console.log(`   ‚ö†Ô∏è Unexpected error: ${anonError.message}`)
    } else {
      console.log('   ‚ö†Ô∏è RLS may not be properly configured (anonymous access allowed)')
    }
    
    // Test with service role (should bypass RLS)
    const { data: serviceProperties, error: serviceError } = await supabase
      .from('properties')
      .select('id')
      .limit(1)
    
    if (serviceError) {
      console.log(`   ‚ùå Service role access failed: ${serviceError.message}`)
      allTestsPassed = false
    } else {
      console.log('   ‚úÖ Service role can access properties (RLS bypass working)')
    }
    
    // 5. Test access functions
    console.log('\n5Ô∏è‚É£ Access Function Tests...')
    
    if (properties && properties.length > 0 && authUsers?.users?.length > 0) {
      const testProperty = properties[0]
      const testUser = authUsers.users[0]
      
      // Test user_has_property_access function
      const { data: hasAccess, error: accessError } = await supabase.rpc('user_has_property_access', {
        property_id: testProperty.id,
        user_id: testUser.id
      })
      
      if (accessError) {
        console.log(`   ‚ùå Access check failed: ${accessError.message}`)
        allTestsPassed = false
      } else {
        console.log(`   ‚úÖ Access check completed: ${hasAccess ? 'Has access' : 'No access'}`)
      }
      
      // Test get_user_accessible_properties function
      const { data: accessibleProps, error: accessibleError } = await supabase.rpc('get_user_accessible_properties', {
        user_id: testUser.id
      })
      
      if (accessibleError) {
        console.log(`   ‚ùå Accessible properties check failed: ${accessibleError.message}`)
        allTestsPassed = false
      } else {
        console.log(`   ‚úÖ Accessible properties check completed: ${accessibleProps?.length || 0} properties`)
      }
    }
    
    // 6. Final summary
    console.log('\n6Ô∏è‚É£ Migration Verification Summary...')
    
    if (allTestsPassed) {
      console.log('üéâ All tests passed! Migration was successful.')
      console.log('\n‚úÖ Verification Results:')
      console.log('   ‚úÖ Data consistency is maintained')
      console.log('   ‚úÖ Foreign key constraints are satisfied')
      console.log('   ‚úÖ Helper functions are working')
      console.log('   ‚úÖ Property creation is functional')
      console.log('   ‚úÖ RLS policies are active')
      console.log('   ‚úÖ Access control functions are operational')
      
      console.log('\nüí° Your application can now:')
      console.log('   - Create properties using create_property_with_owner()')
      console.log('   - Check property access using user_has_property_access()')
      console.log('   - Get user properties using get_user_accessible_properties()')
      console.log('   - Ensure landlord entries using ensure_user_landlord_entry()')
      
      console.log('\nüîß Example usage in your application:')
      console.log(`
   // Create a property
   const { data: propertyId, error } = await supabase.rpc('create_property_with_owner', {
     property_name: 'My Property',
     property_address: '123 Main Street',
     property_type: 'APARTMENT'
   })
   
   // Check access
   const { data: hasAccess } = await supabase.rpc('user_has_property_access', {
     property_id: propertyId,
     required_roles: ['OWNER', 'PROPERTY_MANAGER']
   })
   
   // Get accessible properties
   const { data: properties } = await supabase.rpc('get_user_accessible_properties')
   `)
      
    } else {
      console.log('‚ùå Some tests failed. Migration may need additional fixes.')
      console.log('\n‚ö†Ô∏è Issues found:')
      console.log('   - Check the error messages above')
      console.log('   - Verify the migration SQL was executed completely')
      console.log('   - Ensure all helper functions were created')
      console.log('   - Check RLS policies are properly configured')
    }
    
  } catch (err) {
    console.error('‚ùå Verification failed:', err)
    allTestsPassed = false
  }
  
  return allTestsPassed
}

// Run the verification
verifyMigrationSuccess().then(success => {
  process.exit(success ? 0 : 1)
})
