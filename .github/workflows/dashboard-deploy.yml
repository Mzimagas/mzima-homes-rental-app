name: Dashboard Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/components/dashboard/**'
      - 'src/hooks/useDashboard*'
      - 'src/services/Dashboard*'
      - 'src/presentation/stores/dashboard*'
      - 'src/contexts/Dashboard*'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tailwind.config.js'
      - 'tsconfig.json'
  
  pull_request:
    branches:
      - main
    paths:
      - 'src/components/dashboard/**'
      - 'src/hooks/useDashboard*'
      - 'src/services/Dashboard*'
      - 'src/presentation/stores/dashboard*'
      - 'src/contexts/Dashboard*'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment without confirmation'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: mzima-homes/dashboard

jobs:
  # Code Quality and Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false

      - name: Run integration tests
        run: npm run test:integration
        env:
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: dashboard
          name: dashboard-coverage

      - name: Run performance tests
        run: npm run test:performance

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript, javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "DEPLOY_VERSION=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_ENV
          echo "FORCE_DEPLOY=${{ github.event.inputs.force_deploy || 'false' }}" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          chmod +x scripts/deploy-dashboard.sh
          if [ "$FORCE_DEPLOY" = "true" ]; then
            ./scripts/deploy-dashboard.sh staging -v "$DEPLOY_VERSION" --force --health-check
          else
            ./scripts/deploy-dashboard.sh staging -v "$DEPLOY_VERSION" --health-check
          fi
        env:
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          STAGING_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          STAGING_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          DEPLOY_SSH_KEY: ${{ secrets.STAGING_DEPLOY_SSH_KEY }}

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: https://staging.mzimahomes.com

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Dashboard deployed to staging successfully! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "DEPLOY_VERSION=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_ENV
          echo "FORCE_DEPLOY=${{ github.event.inputs.force_deploy || 'false' }}" >> $GITHUB_ENV

      - name: Deploy to production
        run: |
          chmod +x scripts/deploy-dashboard.sh
          if [ "$FORCE_DEPLOY" = "true" ]; then
            ./scripts/deploy-dashboard.sh production -v "$DEPLOY_VERSION" --backup --force --health-check
          else
            ./scripts/deploy-dashboard.sh production -v "$DEPLOY_VERSION" --backup --health-check
          fi
        env:
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          PRODUCTION_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          PRODUCTION_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          DEPLOY_SSH_KEY: ${{ secrets.PRODUCTION_DEPLOY_SSH_KEY }}

      - name: Run production smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: https://dashboard.mzimahomes.com

      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: dashboard-v${{ github.run_number }}
          release_name: Dashboard Release v${{ github.run_number }}
          body: |
            ## Dashboard Release v${{ github.run_number }}
            
            ### Changes
            - Deployed from commit: ${{ github.sha }}
            - Docker image: ${{ needs.build.outputs.image-tag }}
            
            ### Deployment Details
            - Environment: Production
            - Deployed at: ${{ github.event.head_commit.timestamp }}
            - Deployed by: ${{ github.actor }}
          draft: false
          prerelease: false

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Dashboard deployed to production successfully! ðŸŽ‰'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Setup monitoring
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "MONITOR_URL=https://dashboard.mzimahomes.com" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "MONITOR_URL=https://staging.mzimahomes.com" >> $GITHUB_ENV
          fi

      - name: Monitor deployment health
        run: |
          echo "Monitoring $ENVIRONMENT deployment..."
          
          # Wait for deployment to stabilize
          sleep 60
          
          # Check health endpoint
          for i in {1..10}; do
            if curl -f -s "$MONITOR_URL/api/health" > /dev/null; then
              echo "Health check $i/10: PASSED"
              break
            else
              echo "Health check $i/10: FAILED"
              if [ $i -eq 10 ]; then
                echo "Health checks failed, triggering alert"
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Performance monitoring
        run: |
          # Run Lighthouse performance audit
          npm install -g lighthouse
          lighthouse "$MONITOR_URL" --output=json --output-path=./lighthouse-report.json
          
          # Extract performance score
          PERFORMANCE_SCORE=$(cat lighthouse-report.json | jq '.categories.performance.score * 100')
          echo "Performance Score: $PERFORMANCE_SCORE"
          
          # Fail if performance score is below threshold
          if [ $(echo "$PERFORMANCE_SCORE < 80" | bc) -eq 1 ]; then
            echo "Performance score below threshold (80)"
            exit 1
          fi

      - name: Alert on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Dashboard deployment monitoring failed! ðŸš¨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback workflow
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          chmod +x scripts/deploy-dashboard.sh
          ./scripts/deploy-dashboard.sh rollback --force
        env:
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DEPLOY_SSH_KEY: ${{ secrets.PRODUCTION_DEPLOY_SSH_KEY }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Dashboard rollback completed",
              attachments: [{
                color: "warning",
                fields: [{
                  title: "Environment",
                  value: "Production",
                  short: true
                }, {
                  title: "Triggered by",
                  value: "${{ github.actor }}",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
