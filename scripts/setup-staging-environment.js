#!/usr/bin/env node

/**
 * Staging Environment Setup Script
 * Guides through complete staging environment setup for soft delete testing
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve)
  })
}

async function validateStagingCredentials(url, serviceKey) {
  try {
    const supabase = createClient(url, serviceKey)

    // Test connection by trying to get table count
    const { data, error } = await supabase
      .from('properties')
      .select('*', { count: 'exact', head: true })

    if (error && !error.message.includes('relation "properties" does not exist')) {
      throw new Error(`Connection failed: ${error.message}`)
    }

    console.log('✅ Staging connection validated successfully!')
    return true
  } catch (err) {
    console.error(`❌ Connection validation failed: ${err.message}`)
    return false
  }
}

async function setupStagingCredentials() {
  console.log('\n🔧 STAGING CREDENTIALS SETUP')
  console.log('=' .repeat(60))

  console.log('\n📋 First, create a new Supabase project:')
  console.log('   1. Go to https://supabase.com/dashboard')
  console.log('   2. Click "New Project"')
  console.log('   3. Name: "Mzima Homes Staging"')
  console.log('   4. Region: eu-north-1 (same as production)')
  console.log('   5. Generate a secure database password')
  console.log('   6. Wait for project creation to complete')

  const ready = await askQuestion('\n✅ Have you created the staging project? (y/n): ')
  if (ready.toLowerCase() !== 'y') {
    console.log('Please create the staging project first and run this script again.')
    return false
  }

  console.log('\n📝 Now enter your staging project credentials:')

  const projectUrl = await askQuestion('Project URL (https://xxx.supabase.co): ')
  const anonKey = await askQuestion('Anon Key: ')
  const serviceKey = await askQuestion('Service Role Key: ')

  // Validate credentials
  console.log('\n🔍 Validating staging credentials...')
  const isValid = await validateStagingCredentials(projectUrl, serviceKey)

  if (!isValid) {
    console.log('❌ Credentials validation failed. Please check and try again.')
    return false
  }

  // Update .env.staging file
  const envContent = `# Staging Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Staging Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${projectUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${anonKey}
SUPABASE_SERVICE_ROLE_KEY=${serviceKey}

# Environment Markers
NODE_ENV=staging
ENVIRONMENT=staging

# Staging-specific settings
NEXT_PUBLIC_APP_ENV=staging
NEXT_PUBLIC_DEBUG_MODE=true

# Soft Delete Testing Configuration
ENABLE_TABLE_ARCHIVING=true
ARCHIVE_MONITORING_MODE=true
ROLLBACK_ON_ERROR=true
`

  fs.writeFileSync('.env.staging', envContent)
  console.log('✅ Staging credentials saved to .env.staging')

  return { projectUrl, anonKey, serviceKey }
}

async function restoreProductionDataToStaging(credentials) {
  console.log('\n📦 PRODUCTION DATA RESTORATION')
  console.log('=' .repeat(60))

  // Check if backup exists
  const backupDirs = fs.readdirSync('backups').filter(dir => dir.startsWith('database-backup-'))

  if (backupDirs.length === 0) {
    console.log('❌ No production backup found. Please run the backup script first.')
    return false
  }

  // Use the most recent backup
  const latestBackup = backupDirs.sort().reverse()[0]
  const backupPath = path.join('backups', latestBackup)

  console.log(`📂 Using backup: ${latestBackup}`)

  const restore = await askQuestion('Restore production data to staging? (y/n): ')
  if (restore.toLowerCase() !== 'y') {
    console.log('⚠️  Skipping data restoration. You can restore later using:')
    console.log(`   node scripts/restore-to-staging.js --backup-dir=./backups/${latestBackup}`)
    return true
  }

  console.log('🔄 Starting data restoration...')

  try {
    // Run the restoration script
    const { spawn } = require('child_process')

    const restoreProcess = spawn('node', [
      'scripts/restore-to-staging.js',
      `--backup-dir=./backups/${latestBackup}`
    ], {
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'staging' }
    })

    return new Promise((resolve) => {
      restoreProcess.on('close', (code) => {
        if (code === 0) {
          console.log('✅ Data restoration completed successfully!')
          resolve(true)
        } else {
          console.log('❌ Data restoration failed.')
          resolve(false)
        }
      })
    })
  } catch (error) {
    console.error(`❌ Restoration error: ${error.message}`)
    return false
  }
}

async function setupStagingEnvironment() {
  console.log('🚀 STAGING ENVIRONMENT SETUP')
  console.log('🎯 Goal: Safe testing environment for soft delete operations')
  console.log(`⏰ Started at: ${new Date().toISOString()}`)

  try {
    // Step 1: Setup credentials
    const credentials = await setupStagingCredentials()
    if (!credentials) {
      console.log('❌ Staging setup failed at credentials step.')
      return false
    }

    // Step 2: Restore production data
    const dataRestored = await restoreProductionDataToStaging(credentials)
    if (!dataRestored) {
      console.log('❌ Staging setup failed at data restoration step.')
      return false
    }

    // Success summary
    console.log('\n🎉 STAGING ENVIRONMENT SETUP COMPLETE!')
    console.log('=' .repeat(60))
    console.log('✅ Staging Supabase project created and configured')
    console.log('✅ Production data restored to staging')
    console.log('✅ Ready for soft delete testing')

    console.log('\n🔄 NEXT STEPS:')
    console.log('   1. Review the soft delete plan: soft-delete-cleanup-plan.json')
    console.log('   2. Start with Phase 1: Schema backup and monitoring setup')
    console.log('   3. Execute Phase 2: Archive 28 high-priority tables')
    console.log('   4. Monitor for 1 week before proceeding')

    console.log('\n📋 USEFUL COMMANDS:')
    console.log('   npm run dev:staging          # Start staging application')
    console.log('   npm run analyze:staging      # Analyze staging database')
    console.log('   npm run archive:staging      # Run table archiving')

    return true

  } catch (error) {
    console.error(`❌ Setup failed: ${error.message}`)
    return false
  } finally {
    rl.close()
  }
}

// Run the setup
setupStagingEnvironment()
  .then(success => {
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error(`❌ Fatal error: ${error.message}`)
    process.exit(1)
  })